{"version":3,"sources":["List.js","fire.js","App.js","serviceWorker.js","index.js"],"names":["List","_this","this","react_default","a","createElement","id","props","list","map","value","index","key","className","text","status","onClick","statusToggle","name","e","deleteList","React","Component","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","Object","classCallCheck","console","log","possibleConstructorReturn","getPrototypeOf","call","state","input","doneTasks","handleChange","bind","assertThisInitialized","handleSubmit","_this2","listRef","database","ref","orderByKey","limitToLast","on","snapshot","val","concat","filter","item","i","length","setState","forEach","listValue","preventDefault","target","uid","update","currentInput","push","stopPropagation","remove","onSubmit","type","placeholder","onChange","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b9b8367.chunk.js","sourcesContent":["import React from 'react';\nclass List extends React.Component{\n    render () {\n        return (\n            <ul id=\"myUL\">\n                {this.props.list.map((value, index) => {\n                    //console.log(value,index)\n                    return (\n\n                        <li key={index} className={value.text.status} onClick={()=>this.props.statusToggle(index)}>\n                        {value.text.name}\n                        <span className='close' onClick={(e)=>this.props.deleteList(e,index)}>\n                        X\n                          </span>\n                          </li>\n                    )\n                })}\n                </ul>\n        )\n    }\n\n}\nexport default List;","import firebase from 'firebase'\nvar config = {\n    apiKey: \"AIzaSyAESAZL26PsKLuD_FQz0oUigvvfByX8PUg\",\n    authDomain: \"todolist-95.firebaseapp.com\",\n    databaseURL: \"https://todolist-95.firebaseio.com\",\n    projectId: \"todolist-95\",\n    storageBucket: \"todolist-95.appspot.com\",\n    messagingSenderId: \"481397984215\"\n  };\n  var fire = firebase.initializeApp(config);\n  export default fire;","import React, { Component } from 'react';\nimport List from './List';\nimport fire from './fire';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    console.log(fire)\n    super(props)\n    this.state = {\n      input: '',\n      list:[],\n      doneTasks:0\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    //this.handleClick = this.handleClick.bind(this)\n    this.deleteList = this.deleteList.bind(this)\n    this.statusToggle = this.statusToggle.bind(this)\n  }\n  componentWillMount(){\n    /* Create reference to messages in Firebase Database */\n   \n    let listRef = fire.database().ref('list').orderByKey().limitToLast(100);\n    listRef.on('child_added', snapshot => {\n      /* Update React state when message is added at Firebase Database */\n      let listvalue = { text: snapshot.val(), id: snapshot.key };\n      let list=[listvalue].concat(this.state.list)\n      const doneTasks=list.filter((item,i)=>{\n        return item.text.status==='checked'\n     }).length;\n      this.setState({\n         list: list,\n         doneTasks: doneTasks\n      });\n    })\n    listRef.on('child_changed', snapshot => {\n      let index=-1;\n      this.state.list.forEach((item,i)=>{\n\n        if(item.id==snapshot.key){\n          index=i\n        }\n      })\n      let listValue = { text: snapshot.val(), id: snapshot.key };\n      let list = this.state.list\n      list[index]=listValue\n      const doneTasks=list.filter((item,i)=>{\n        return item.text.status==='checked'\n     }).length;\n      this.setState({\n         list: list,\n         doneTasks: doneTasks\n      });\n      \n    })\n    listRef.on('child_removed', snapshot => {\n      let index=-1;\n      this.state.list.forEach((item,i)=>{\n\n        if(item.id==snapshot.key){\n          index=i\n        }\n      })\n      const list=this.state.list.filter((item,i)=>{\n        return i!==index\n     })\n     const doneTasks=list.filter((item,i)=>{\n      return item.text.status==='checked'\n   }).length;\n    this.setState({\n       list:list,\n       doneTasks: doneTasks\n    });\n    })\n  \n  }\n  handleChange(e) {\n    e.preventDefault();\n      this.setState({\n          list:this.state.list,\n          input: e.target.value\n      })\n     // console.log(this.state)\n  }\n  statusToggle(index) {  \n    \n    console.log(this.state)\n    const list = this.state.list\n    if(list[index].text.status==='')\n    list[index].text.status='checked';\n    else\n    list[index].text.status='';\n    const doneTasks= list.filter((item,i)=>{\n      return item.text.status==='checked'\n   }).length; \n    this.setState({\n     // list:list,\n     // doneTasks:doneTasks\n   });\n   let uid=list[index].id;\n   fire.database().ref('list/'+uid).update({ status: list[index].text.status });\n    // console.log(this.state)\n \n  }\n  handleSubmit(e){\n    e.preventDefault()\n    //rooms.push({roomId:this.state.roomId+1,name:name,messages:messages});\n    if(this.state.input!==''){\n    console.log('here')\n    this.currentInput = {};\n   this.currentInput.name=this.state.input;\n   this.currentInput.status='';\n    this.setState({\n     // list:[...this.state.list,this.currentInput],\n      input:''\n    })\n    fire.database().ref('list').push(this.currentInput);\n    }\n  }\n  deleteList(e,index){\n    e.stopPropagation();\n    console.log('deleteList')\n    let uid=this.state.list[index].id;\n     const list=this.state.list.filter((item,i)=>{\n        return i!==index\n     })\n     const doneTasks=list.filter((item,i)=>{\n      return item.status==='checked'\n   }).length;\n     console.log(list)\n     this.setState({\n        // list:list,\n       // doneTasks:doneTasks\n     });\n     \n     fire.database().ref('list/'+uid).remove();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"myDIV\" className=\"header\">\n        <form onSubmit={this.handleSubmit}>\n         <h2 >My To Do List</h2>\n         <input type=\"text\" id=\"myInput\" placeholder=\"Title...\" onChange={this.handleChange} value={this.state.input}/>\n         <input className=\"addBtn\" type=\"submit\" value=\"Add\" />\n         </form>\n       </div>\n       <List list={this.state.list} deleteList={this.deleteList} statusToggle={this.statusToggle}/>\n   <div className='donetasks'>Total done task:{this.state.doneTasks}/{this.state.list.length}</div>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}